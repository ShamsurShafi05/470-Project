{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\This PC\\\\Desktop\\\\Club Management Website 470\\\\frontend\\\\src\\\\pages\\\\UserCalendar.jsx\",\n  _s = $RefreshSig$();\nimport formatDate from \"../utils/FormatDate\";\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom'; // Import Link from React Router\nimport EventDetails from \"./EachEvent\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserCalendar = () => {\n  _s();\n  const [events, setEvents] = useState(null);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n  const [hoveredDate, setHoveredDate] = useState(null);\n  useEffect(() => {\n    const fetchEvents = async () => {\n      const response = await fetch(\"/api/events/\");\n      const json = await response.json();\n      if (response.ok) {\n        setEvents(json);\n      }\n    };\n    fetchEvents();\n  }, []);\n  function changeBackgroundToHomePage() {\n    document.body.classList.add('body-event-main');\n    document.querySelector('.Navbar').classList.add('BlackNavbar');\n    return () => {\n      document.body.classList.remove('body-event-main'); // cleanup lagbeii\n      document.querySelector('.Navbar').classList.remove('BlackNavbar');\n    };\n  }\n  useEffect(changeBackgroundToHomePage, []);\n\n  // get events for the selected date\n  const getEventsForDate = date => {\n    return events ? events.filter(event => new Date(event.date).toDateString() === date.toDateString()) : [];\n  };\n\n  // events array null hoile empty array returned\n  // null na hoile array ta filter korbo\n  // arrow function taking event as parameter; \n  // The new keyword in JavaScript is used to create instances of objects from constructor functions. \n  // In the context of new Date(event.date), it is used to create a new Date object based on the value of event.date.\n  // If the event's date matches the input date, it includes that event in the filtered array.\n  // .toDtaeString() method returns a string representation of the date portion of the Date object, ignoring the time portion.\n\n  // previous month button\n  const handlePrevMonth = () => {\n    setSelectedDate(prevDate => new Date(prevDate.getFullYear(), prevDate.getMonth() - 1, 1));\n  };\n\n  //  next month button\n  const handleNextMonth = () => {\n    setSelectedDate(prevDate => new Date(prevDate.getFullYear(), prevDate.getMonth() + 1, 1));\n  };\n\n  // handleNextMonth is an arrow function that, when called, updates the selectedDate state variable to the first day of the next month. \n  // It uses the previous value of selectedDate to calculate the new date.\n  // arrow function with one parameter prevDate \n  // This parameter represents the previous value of the selectedDate state variable.\n  // how new object being made: =========================================================================\n  // creates a new Date object representing the first day of the next month. \n  // getFullYear() and getMonth() methods of the previous date (prevDate) to get the year and month components. \n  // It then adds 1 to the month component to move to the next month. \n  // The day component is set to 1 to represent the first day of the month.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Calendar\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendarHeader\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handlePrevMonth,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faArrowLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedDate.toLocaleString('default', {\n          month: 'long',\n          year: 'numeric'\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNextMonth,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faArrowRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 51\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"calendarGrid\",\n      children: Array.from({\n        length: 42\n      }).map((_, index) => {\n        const currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), index + 1 - selectedDate.getDay());\n        const classNames = currentDate.getMonth() === selectedDate.getMonth() ? 'calendarDay' : 'calendarDay otherMonth';\n        const eventsForDate = getEventsForDate(currentDate);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          //CHECK BELOW NOTES V IMPORTANT\n          className: classNames,\n          onMouseEnter: () => setHoveredDate(currentDate),\n          onMouseLeave: () => setHoveredDate(null),\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: currentDate.getDate()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 29\n          }, this), hoveredDate && hoveredDate.getTime() === currentDate.getTime() && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"eventPopup\",\n            children: eventsForDate.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"eachEvent\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: formatDate(event.date)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 48\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: event.title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(Link, {\n                to: `/events/${event._id}`,\n                children: \"View Details\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 45\n              }, this)]\n            }, event._id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 33\n          }, this)]\n        }, currentDate.toISOString(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(UserCalendar, \"WQP00Ut5Wa0rjH6h0gMW7eqn4Fo=\");\n_c = UserCalendar;\nexport default UserCalendar;\n\n// Array Generation: \n// Array.from({ length: 42 }) creates an array with a length of 42. \n// This array is then used to generate elements for the calendar grid.\n\n// Mapping Over the Array: \n// .map((_, index) => { ... }) iterates over each element of the array. \n// The underscore _ is used as a placeholder for the current element, which is not used in this case. \n// index represents the index of each element in the array.\n\n// Creating Dates: \n// Inside the map function, a new currentDate is created for each element of the array. \n// It calculates the date based on ======================================================= VVV IMPORTANT\n// the selectedDate (which represents the currently selected month) \n// and \n// the index of the array element. \n// This allows the calendar grid to display dates for the current month and adjacent months.\n\n// CSS Class Determination: \n// classNames determines the CSS class to apply to each calendar day \n//based on whether the currentDate belongs to the selected month or a different month.\n\n// Event Retrieval: \n// eventsForDate retrieves events associated with the currentDate using the getEventsForDate function (amra banaisilam)\n\n// about key = ISOdate..\n\n// Issue:\n// Using the array index (index) as the key for elements rendered in a React component can lead to issues \n// when the order of elements in the array changes. \n// This is because React uses keys to identify elements uniquely and optimize rendering performance.\n// If the order of elements changes in the array, React may mistakenly assume that elements have been added or removed, \n// resulting in unnecessary re-renders or inconsistencies in the UI.\n\n// Solution: \n// replaced the key for the outer div in the Array.from map function \n// with a unique identifier generated from the current date (currentDate.toISOString())\nvar _c;\n$RefreshReg$(_c, \"UserCalendar\");","map":{"version":3,"names":["formatDate","React","useEffect","useState","Link","EventDetails","FontAwesomeIcon","faArrowLeft","faArrowRight","jsxDEV","_jsxDEV","UserCalendar","_s","events","setEvents","selectedDate","setSelectedDate","Date","hoveredDate","setHoveredDate","fetchEvents","response","fetch","json","ok","changeBackgroundToHomePage","document","body","classList","add","querySelector","remove","getEventsForDate","date","filter","event","toDateString","handlePrevMonth","prevDate","getFullYear","getMonth","handleNextMonth","className","children","onClick","icon","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleString","month","year","Array","from","length","map","_","index","currentDate","getDay","classNames","eventsForDate","onMouseEnter","onMouseLeave","getDate","getTime","title","to","_id","toISOString","_c","$RefreshReg$"],"sources":["C:/Users/This PC/Desktop/Club Management Website 470/frontend/src/pages/UserCalendar.jsx"],"sourcesContent":["import formatDate from \"../utils/FormatDate\";\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom'; // Import Link from React Router\r\nimport EventDetails from \"./EachEvent\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowLeft, faArrowRight } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst UserCalendar = () => {\r\n    const [events, setEvents] = useState(null);\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [hoveredDate, setHoveredDate] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchEvents = async () => {\r\n            const response = await fetch(\"/api/events/\");\r\n            const json = await response.json();\r\n\r\n            if (response.ok) {\r\n                setEvents(json);\r\n            }\r\n        };\r\n\r\n        fetchEvents();\r\n    }, []);\r\n\r\n    function changeBackgroundToHomePage() {\r\n        document.body.classList.add('body-event-main');\r\n        document.querySelector('.Navbar').classList.add('BlackNavbar');\r\n        return () => {\r\n            document.body.classList.remove('body-event-main');      // cleanup lagbeii\r\n            document.querySelector('.Navbar').classList.remove('BlackNavbar');\r\n        };\r\n    }\r\n\r\n    useEffect(changeBackgroundToHomePage, []);\r\n\r\n    // get events for the selected date\r\n    const getEventsForDate = (date) => {\r\n        return events ? events.filter(event => new Date(event.date).toDateString() === date.toDateString()) : [];\r\n    }\r\n\r\n    // events array null hoile empty array returned\r\n    // null na hoile array ta filter korbo\r\n    // arrow function taking event as parameter; \r\n    // The new keyword in JavaScript is used to create instances of objects from constructor functions. \r\n    // In the context of new Date(event.date), it is used to create a new Date object based on the value of event.date.\r\n    // If the event's date matches the input date, it includes that event in the filtered array.\r\n    // .toDtaeString() method returns a string representation of the date portion of the Date object, ignoring the time portion.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // previous month button\r\n    const handlePrevMonth = () => {\r\n        setSelectedDate(prevDate => new Date(prevDate.getFullYear(), prevDate.getMonth() - 1, 1));\r\n    }\r\n\r\n    //  next month button\r\n    const handleNextMonth = () => {\r\n        setSelectedDate(prevDate => new Date(prevDate.getFullYear(), prevDate.getMonth() + 1, 1));\r\n    }\r\n\r\n    // handleNextMonth is an arrow function that, when called, updates the selectedDate state variable to the first day of the next month. \r\n    // It uses the previous value of selectedDate to calculate the new date.\r\n    // arrow function with one parameter prevDate \r\n    // This parameter represents the previous value of the selectedDate state variable.\r\n    // how new object being made: =========================================================================\r\n    // creates a new Date object representing the first day of the next month. \r\n    // getFullYear() and getMonth() methods of the previous date (prevDate) to get the year and month components. \r\n    // It then adds 1 to the month component to move to the next month. \r\n    // The day component is set to 1 to represent the first day of the month.\r\n\r\n    return (\r\n        <div className=\"Calendar\">\r\n            <div className=\"calendarHeader\">\r\n                <button onClick={handlePrevMonth}><FontAwesomeIcon icon={faArrowLeft} /></button>  \r\n                <h2>{selectedDate.toLocaleString('default', { month: 'long', year: 'numeric' })}</h2>\r\n                {/* used to convert a Date object to a string, representing the date and time according to the locale-specific \r\n                conventions (language and region) of the environment in which the code is running. */}\r\n                <button onClick={handleNextMonth}><FontAwesomeIcon icon={faArrowRight} /></button>\r\n            </div>\r\n            <div className=\"calendarGrid\">\r\n                {Array.from({ length: 42 }).map((_, index) => {\r\n                    const currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), index + 1 - selectedDate.getDay());\r\n                    const classNames = currentDate.getMonth() === selectedDate.getMonth() ? 'calendarDay' : 'calendarDay otherMonth';\r\n                    const eventsForDate = getEventsForDate(currentDate);\r\n                    return (\r\n                        <div\r\n                            key={currentDate.toISOString()}  //CHECK BELOW NOTES V IMPORTANT\r\n                            className={classNames}\r\n                            onMouseEnter={() => setHoveredDate(currentDate)}\r\n                            onMouseLeave={() => setHoveredDate(null)}\r\n                        >\r\n                            <span>{currentDate.getDate()}</span>\r\n                            {/* hoveredDate.getTime(): retrieves the time value (in milliseconds since January 1, 1970) of the hoveredDate.\r\n                                currentDate.getTime(): This retrieves the time value of the currentDate being rendered in the calendar grid. \r\n                                \r\n                                The getDate() method, on the other hand, returns the day of the month (1-31) for the Date object. \r\n                                It doesn't provide information about the entire date and time, only the day of the month.*/}\r\n                            {hoveredDate && hoveredDate.getTime() === currentDate.getTime() && (\r\n                                <div className=\"eventPopup\">\r\n                                    {eventsForDate.map(event => (\r\n                                        <div className=\"eachEvent\" key={event._id}>\r\n                                            <p><strong>{formatDate(event.date)}</strong></p>\r\n                                            <p>{event.title}</p>\r\n                                            <Link to={`/events/${event._id}`}>View Details</Link>\r\n                                        </div>\r\n                                    ))}\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserCalendar;\r\n\r\n\r\n\r\n\r\n// Array Generation: \r\n// Array.from({ length: 42 }) creates an array with a length of 42. \r\n// This array is then used to generate elements for the calendar grid.\r\n\r\n// Mapping Over the Array: \r\n// .map((_, index) => { ... }) iterates over each element of the array. \r\n// The underscore _ is used as a placeholder for the current element, which is not used in this case. \r\n// index represents the index of each element in the array.\r\n\r\n// Creating Dates: \r\n// Inside the map function, a new currentDate is created for each element of the array. \r\n// It calculates the date based on ======================================================= VVV IMPORTANT\r\n// the selectedDate (which represents the currently selected month) \r\n// and \r\n// the index of the array element. \r\n// This allows the calendar grid to display dates for the current month and adjacent months.\r\n\r\n// CSS Class Determination: \r\n// classNames determines the CSS class to apply to each calendar day \r\n//based on whether the currentDate belongs to the selected month or a different month.\r\n\r\n// Event Retrieval: \r\n// eventsForDate retrieves events associated with the currentDate using the getEventsForDate function (amra banaisilam)\r\n\r\n\r\n\r\n\r\n\r\n// about key = ISOdate..\r\n\r\n// Issue:\r\n// Using the array index (index) as the key for elements rendered in a React component can lead to issues \r\n// when the order of elements in the array changes. \r\n// This is because React uses keys to identify elements uniquely and optimize rendering performance.\r\n// If the order of elements changes in the array, React may mistakenly assume that elements have been added or removed, \r\n// resulting in unnecessary re-renders or inconsistencies in the UI.\r\n\r\n\r\n// Solution: \r\n// replaced the key for the outer div in the Array.from map function \r\n// with a unique identifier generated from the current date (currentDate.toISOString())"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}